version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: receiptlocker-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-receiptlocker}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - receiptlocker-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: receiptlocker-backend
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-receiptlocker}?sslmode=disable
      PORT: 8080
      GIN_MODE: ${GIN_MODE:-debug}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - receiptlocker-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8080}
        - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
    container_name: receiptlocker-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - receiptlocker-network
    restart: unless-stopped

volumes:
  postgres_data:
    name: receiptlocker-postgres-data

networks:
  receiptlocker-network:
    name: receiptlocker-network
    driver: bridge
