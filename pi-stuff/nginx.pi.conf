# Nginx configuration for Receipt Store Backend on Raspberry Pi 5
# Optimized for ARM64 architecture and limited resources

user nginx;
worker_processes auto;
worker_rlimit_nofile 1024;

# Error logging
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations for Raspberry Pi
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # Upstream backend
    upstream backend {
        server backend:8080;
        keepalive 32;
    }
    
    # HTTP server (redirect to HTTPS in production)
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other traffic to HTTPS (uncomment for production)
        # return 301 https://$server_name$request_uri;
        
        # For development/testing, proxy to backend
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
    }
    
    # HTTPS server (uncomment and configure for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     # SSL configuration
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:SSL:50m;
    #     ssl_session_tickets off;
    #     
    #     # Modern SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # HSTS
    #     add_header Strict-Transport-Security "max-age=63072000" always;
    #     
    #     # Security headers
    #     add_header X-Frame-Options DENY;
    #     add_header X-Content-Type-Options nosniff;
    #     add_header X-XSS-Protection "1; mode=block";
    #     add_header Referrer-Policy "strict-origin-when-cross-origin";
    #     
    #     # API routes with rate limiting
    #     location /api/ {
    #         limit_req zone=api burst=20 nodelay;
    #         
    #         proxy_pass http://backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         
    #         # CORS headers
    #         add_header Access-Control-Allow-Origin "https://temidara.rocks" always;
    #         add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    #         add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With, x-user-id" always;
    #         add_header Access-Control-Allow-Credentials true always;
    #         
    #         # Handle preflight requests
    #         if ($request_method = 'OPTIONS') {
    #             add_header Access-Control-Allow-Origin "https://temidara.rocks";
    #             add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
    #             add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With, x-user-id";
    #             add_header Access-Control-Allow-Credentials true;
    #             add_header Access-Control-Max-Age 1728000;
    #             add_header Content-Type 'text/plain charset=UTF-8';
    #             add_header Content-Length 0;
    #             return 204;
    #         }
    #     }
    #     
    #     # Health check
    #     location /health {
    #         access_log off;
    #         return 200 "healthy\n";
    #         add_header Content-Type text/plain;
    #     }
    # }
}
