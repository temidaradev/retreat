version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: receipt-store-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: receiptlocker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - receipt-store-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d receiptlocker" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Receipt Store Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.pi
    container_name: receipt-store-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      PORT: 8080
      GIN_MODE: release
      DEV_MODE: false

      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      DB_NAME: receiptlocker
      DB_SSLMODE: disable
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 5
      DB_CONN_MAX_LIFETIME: 5m
      DB_CONN_MAX_IDLE_TIME: 1m

      # Authentication
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}

      # Email Configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@retreat.com}

      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: /tmp/uploads

      # Logging Configuration
      LOG_LEVEL: info
      LOG_FORMAT: text
    ports:
      - "8080:8080"
    volumes:
      - uploads:/tmp/uploads
      - logs:/app/logs
    networks:
      - receipt-store-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: receipt-store-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.pi.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - receipt-store-network
    depends_on:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 5s
      retries: 3

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: receipt-store-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
    command: --interval 3600 --cleanup --revive-stopped
    networks:
      - receipt-store-network

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  receipt-store-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
